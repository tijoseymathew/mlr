% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PHMStageClassifierWrapper.R
\name{stageTransitionHard}
\alias{stageTransitionHard}
\title{#' @export
stageThClassifier = function(learner=makeLearner("classif.ksvm"), threshold, predictWindow) {
  assertClass(learner, "RLearnerClassif")
  function(task) {
    td = getTaskDesc(task)
    tid = td$order.by; sid = td$seq.id; tar = td$target
    dat = getTaskData(task)
    # Make classifier task
    clDat = dat[, setdiff(names(dat), c(tid, sid, tar))]
    if (! threshold %between% range(dat[[tar]]))
      stop("Threshold does not divide data!")
    clDat$.Stage = ifelse(dat[[tar]] <= threshold, "Stage2", "Stage1")
    clTask = makeClassifTask(data = clDat, target = ".Stage", positive = "Stage2")
    clMdl = train(learner, clTask)
    
    mdl = makeS3Obj(classes = "stageThClassifier", seq.id=sid, order.by=tid, predictWindow = predictWindow, clLrn = learner, clMdl = clMdl)
    list(model = mdl, 
         subsets = predict(mdl, dat))
  }
}
#' @export
predict.stageThClassifier = function(obj, data) {
  clDat = data[, setdiff(names(data), c(obj$seq.id, obj$order.by))]
  pDat = as.data.table(data[, c(obj$seq.id, obj$order.by)])
  pDat$.stage = predictLearner(.learner = obj$clLrn, .model = obj$clMdl, .newdata = clDat)
  pDat[order(get(obj$order.by)), 
       stage_filtered := {
         tmp = cumsum(.stage == "Stage2")
         ifelse(tmp > obj$predictWindow, "Stage2", "Stage1")
       }, 
       by=get(obj$seq.id)]
  list(Stage1 = which(pDat$stage_filtered == "Stage1"),
       Stage2 = which(pDat$stage_filtered == "Stage2"))
}}
\usage{
stageTransitionHard(data, cp)
}
\description{
#' @export
stageThClassifier = function(learner=makeLearner("classif.ksvm"), threshold, predictWindow) {
  assertClass(learner, "RLearnerClassif")
  function(task) {
    td = getTaskDesc(task)
    tid = td$order.by; sid = td$seq.id; tar = td$target
    dat = getTaskData(task)
    # Make classifier task
    clDat = dat[, setdiff(names(dat), c(tid, sid, tar))]
    if (! threshold %between% range(dat[[tar]]))
      stop("Threshold does not divide data!")
    clDat$.Stage = ifelse(dat[[tar]] <= threshold, "Stage2", "Stage1")
    clTask = makeClassifTask(data = clDat, target = ".Stage", positive = "Stage2")
    clMdl = train(learner, clTask)
    
    mdl = makeS3Obj(classes = "stageThClassifier", seq.id=sid, order.by=tid, predictWindow = predictWindow, clLrn = learner, clMdl = clMdl)
    list(model = mdl, 
         subsets = predict(mdl, dat))
  }
}
#' @export
predict.stageThClassifier = function(obj, data) {
  clDat = data[, setdiff(names(data), c(obj$seq.id, obj$order.by))]
  pDat = as.data.table(data[, c(obj$seq.id, obj$order.by)])
  pDat$.stage = predictLearner(.learner = obj$clLrn, .model = obj$clMdl, .newdata = clDat)
  pDat[order(get(obj$order.by)), 
       stage_filtered := {
         tmp = cumsum(.stage == "Stage2")
         ifelse(tmp > obj$predictWindow, "Stage2", "Stage1")
       }, 
       by=get(obj$seq.id)]
  list(Stage1 = which(pDat$stage_filtered == "Stage1"),
       Stage2 = which(pDat$stage_filtered == "Stage2"))
}
}
